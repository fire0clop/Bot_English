from loader import active_sessions, bot
from database.db import User, Word
from api.random_word import get_random_words
from keyboards.inline.default_inline_keyb import generate_options_keyboard, main_menu
import random
from peewee import fn

def init_training(user_id):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
    """
    if user_id in active_sessions and active_sessions[user_id]:
        print(f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        try:
            user = User.get(User.user_id == user_id)
            words = Word.select().where((Word.user == user) & (Word.learned == False))
            active_sessions[user_id] = [(word.russian_word, word.english_word) for word in words]
        except User.DoesNotExist:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return

    print(f"–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {active_sessions[user_id]}")
    ask_question(user_id)

def ask_question(user_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å –æ –ø–µ—Ä–µ–≤–æ–¥–µ —Å–ª–æ–≤–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
    """
    if not active_sessions[user_id]:
        bot.send_message(user_id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", reply_markup=main_menu())
        return

    russian_word, correct_english_word = active_sessions[user_id].pop(0)

    random_words = get_random_words(3)
    while correct_english_word in random_words:
        random_words = get_random_words(3)

    options = random_words + [correct_english_word]
    random.shuffle(options)

    question_text = f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ - **{russian_word}**?"
    bot.send_message(
        user_id,
        question_text,
        parse_mode="Markdown",
        reply_markup=generate_options_keyboard(options, correct_english_word)
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("answer:"))
def check_answer(call):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å.

    :param call: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram API.
    """
    _, correct_word, selected_word = call.data.split(":")
    user_id = call.from_user.id

    correct_word = correct_word.strip().lower()
    selected_word = selected_word.strip().lower()

    print(f"‚úÖ DEBUG: correct_word='{correct_word}', selected_word='{selected_word}'")

    user = User.get_or_none(User.user_id == user_id)
    if not user:
        bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        return

    word = Word.get_or_none((Word.user == user) & (fn.LOWER(Word.english_word) == correct_word))
    if not word:
        bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î.")
        return

    if correct_word == selected_word:
        word.score = min(word.score + 1, 20)
        response_text = "‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!"
    else:
        word.score = max(word.score - 1, 0)
        response_text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {word.english_word}"

    if word.score >= 7:
        word.learned = True
        response_text += "\nüéâ –°–ª–æ–≤–æ –∏–∑—É—á–µ–Ω–æ! –û–Ω–æ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö."

    word.save()
    bot.send_message(user_id, response_text)
    ask_question(user_id)
