from loader import active_sessions, bot
from database.db import User, Word
from api.random_word import get_random_words
from keyboards.inline.default_inline_keyb import generate_options_keyboard, main_menu
import random
from peewee import fn  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è LOWER()
def init_training(user_id):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫."""

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if user_id in active_sessions and active_sessions[user_id]:
        print(f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
        try:
            user = User.get(User.user_id == user_id)
            words = (
                Word.select()
                .where((Word.user == user) & (Word.learned == False))
            )
            active_sessions[user_id] = [(word.russian_word, word.english_word) for word in words]
        except User.DoesNotExist:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return

    print(f"–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {active_sessions[user_id]}")
    ask_question(user_id)

def ask_question(user_id):
    """–ó–∞–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞"""
    if not active_sessions[user_id]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Å–ª–æ–≤–∞
        bot.send_message(user_id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", reply_markup=main_menu())
        return

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    russian_word, correct_english_word = active_sessions[user_id].pop(0)

    # –ü–æ–ª—É—á–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤–∞, –∏—Å–∫–ª—é—á–∞—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    random_words = get_random_words(3)
    while correct_english_word in random_words:
        random_words = get_random_words(3)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
    options = random_words + [correct_english_word]
    random.shuffle(options)

    # –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    question_text = f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ - **{russian_word}**?"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    bot.send_message(user_id, question_text, parse_mode="Markdown", reply_markup=generate_options_keyboard(options, correct_english_word))

@bot.callback_query_handler(func=lambda call: call.data.startswith("answer:"))
def check_answer(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–ª—ã –∑–∞ —Å–ª–æ–≤–æ.
    """
    _, correct_word, selected_word = call.data.split(":")  # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    user_id = call.from_user.id

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    correct_word = correct_word.strip().lower()
    selected_word = selected_word.strip().lower()

    print(f"‚úÖ DEBUG: correct_word='{correct_word}', selected_word='{selected_word}'")  # –õ–æ–≥

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user = User.get_or_none(User.user_id == user_id)
    if not user:
        bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ –ë–î —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    word = Word.get_or_none(
        (Word.user == user) & (fn.LOWER(Word.english_word) == correct_word)
    )

    if not word:
        bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if correct_word == selected_word:
        word.score = min(word.score + 1, 20)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 20
        response_text = "‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!"
    else:
        word.score = max(word.score - 1, 0)  # –ù–µ —É—Ö–æ–¥–∏–º –Ω–∏–∂–µ 0
        response_text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {word.english_word}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 20 –±–∞–ª–ª–æ–≤
    if word.score >= 7:
        word.learned = True
        response_text += "\nüéâ –°–ª–æ–≤–æ –∏–∑—É—á–µ–Ω–æ! –û–Ω–æ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö."

    word.save()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã –≤ –ë–î

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    bot.send_message(user_id, response_text)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    ask_question(user_id)



